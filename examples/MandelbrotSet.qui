extern void putchard(i8 char);

def void printdensity(i32 d)
{
	if (d > 8)
	{
		putchard(32:i8);
	};
	else if (d > 4)
	{
		putchard(46:i8);
	};
	else if (d > 2)
		putchard(43:i8);
	else
		putchard(42:i8);
};

# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.
def i32 mandelconverger(float real, float imag, i32 iters, float creal, float cimag)
{
	if (iters > 255 | (real*real + imag*imag > 4)) {
		flee iters;
    };
    mandelconverger(real*real - imag*imag + creal, 2.0*real*imag + cimag, iters+1, creal, cimag)
}

# Return the number of iterations required for the iteration to escape
def i32 mandelconverge(float real, float imag)
{
    mandelconverger(real, imag, 0, real, imag)
}

# Compute and plot the mandelbrot set with the specified 2 dimensional range
# info.
def void mandelhelp(float xmin, float xmax, float xstep, float ymin, float ymax, float ystep) 
{
	for (float y = ymin; y < ymax; y = y + ystep )
	{
		for (float x = xmin; x < xmax; x = x + xstep) 
		{
			printdensity(mandelconverge(x,y));
		};
		putchard(10:i8);
	};    
};

# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def void mandel(float realstart, float imagstart, float realmag, float imagmag)
{
	mandelhelp(realstart, realstart+realmag*78.0, realmag,
		imagstart, imagstart+imagmag*40.0, imagmag);
};

def void main(){
    mandel(-2.3:f, -1.3:f, 0.05:f, 0.07:f);
    mandel(-2.0:f, -1.0:f, 0.02:f, 0.04:f);
    mandel(-0.9:f, -1.4:f, 0.02:f, 0.03:f);
}
