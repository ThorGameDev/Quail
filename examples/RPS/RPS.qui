extern i8 input();
extern void putchard(i8 char);
extern void i8out(i8 value);
extern void i32out(i32 value);

def void rock(bool caps) {
    if (caps)
        putchard(82:i8); # R
    else 
        putchard(114:i8); # r
    putchard(111:i8); #o
    putchard(99:i8); #c
    putchard(107:i8); #k
}

def void paper(bool caps) {
    if (caps)
        putchard(80:i8); #P
    else
        putchard(112:i8); #p
    putchard(97:i8); #a
    putchard(112:i8); #p
    putchard(101:i8); #e
    putchard(114:i8); #r
}

def void scissors(bool caps) {
    if (caps)
        putchard(83:i8); #S
    else
        putchard(115:i8); #s
    putchard(99:i8); #c
    putchard(105:i8); #i
    putchard(115:i8); #s
    putchard(115:i8); #s
    putchard(111:i8); #o
    putchard(114:i8); #r
    putchard(115:i8); #s
}

def void welcome() {
    putchard(87:i8); #W
    putchard(101:i8); #e
    putchard(108:i8); #l
    putchard(99:i8); #c
    putchard(111:i8); #o
    putchard(109:i8); #m
    putchard(101:i8); #e
    putchard(32:i8); # <Space>
    putchard(116:i8); #t
    putchard(111:i8); #o
    putchard(32:i8); # <Space>
    rock(true);
    putchard(32:i8); # <Space>
    paper(true);
    putchard(32:i8); # <Space>
    scissors(true);
    putchard(10:i8); # \n
}

def void showChoice(i8 choice){
    if (choice == 0:i8)
        rock(false);
    else if (choice == 1:i8)
        paper(false);
    else
        scissors(false);
}

def void help() {
    for (i8 i = 0:i8; i < 3:i8; i = i + 1:i8) {
        putchard(112:i8); #p
        putchard(114:i8); #r
        putchard(101:i8); #e
        putchard(115:i8); #s
        putchard(115:i8); #s
        putchard(32:i8); # <Space>

        putchard(39:i8); #'
        if (i == 0:i8)
            putchard(114:i8); #r
        else if (i == 1:i8)
            putchard(112:i8); #p
        else 
            putchard(115:i8); #s
        putchard(39:i8); #'
        putchard(32:i8); # <Space>

        putchard(102:i8); #f
        putchard(111:i8); #o
        putchard(114:i8); #r
        putchard(32:i8); # <Space>
            
        putchard(39:i8); #'
        showChoice(i);
        putchard(39:i8); #'

        putchard(10:i8); # \n
    };
};

def void showGame(i32 gameID, i32 score){
    putchard(10:i8); # \n
    putchard(71:i8); #G
    putchard(97:i8); #a
    putchard(109:i8); #m
    putchard(101:i8); #e
    putchard(35:i8); ##
    putchard(32:i8); # <Space>

    i32out(gameID);

    putchard(83:i8); #S
    putchard(99:i8); #c
    putchard(111:i8); #o
    putchard(114:i8); #r
    putchard(101:i8); #e
    putchard(58:i8); #:
    putchard(32:i8); # <Space>
    i32out(score);
    
    putchard(10:i8); # \n
}

def void played(){
    putchard(112:i8); #p
    putchard(108:i8); #l
    putchard(97:i8); #a
    putchard(121:i8); #y
    putchard(101:i8); #e
    putchard(100:i8); #d
}

def void You(){
    putchard(89:i8); #Y
    putchard(111:i8); #o
    putchard(117:i8); #u
}

def i8 showResults(i8 AI_decision, i8 player_decision) {
    You();
    putchard(32:i8); # <Space>
    played();
    putchard(32:i8); # <Space>
    showChoice(player_decision);
    putchard(10:i8); # \n

    putchard(65:i8); #A
    putchard(73:i8); #I
    putchard(32:i8); # <Space>
    played();
    putchard(32:i8); # <Space>
    showChoice(AI_decision);
    putchard(10:i8); # \n
    i8 scoreAdjust = 0:i8;
    if (player_decision == (AI_decision + 1) % 3) {
        You();
        putchard(32:i8); # <Space>
        putchard(119:i8); #w
        putchard(105:i8); #i
        putchard(110:i8); #n
        putchard(33:i8); #!
        scoreAdjust = 1:i8;
    };
    else if (player_decision == (AI_decision - 1) % 3) {

        You();
        putchard(32:i8); # <Space>
        putchard(108:i8); #l
        putchard(111:i8); #o
        putchard(115:i8); #s
        putchard(116:i8); #t
        for (i8 i = 0:i8; i < 3:i8; i = i+1:i8) #...
            putchard(46:i8); #.
        scoreAdjust = -1:i8;
    };
    else {
        putchard(84:i8); #T
        putchard(105:i8); #i
        putchard(101:i8); #e
    };
    putchard(10:i8); # \n
    scoreAdjust
}


# Complex AI logic here
def i8 AIChoice(i8 previous, i8 player, i32 gameID) {
    i8 retval = 0:i8;
    if ( gameID % 13 == 0 ) 
        retval = previous;
    # Won. 
    else if (previous == (player - 1:i8) % 3:i8) 
        retval = player;
    # lost.
    else if (previous == (player + 1:i8) % 3:i8) 
        retval = previous - 1:i8;
    # Tie. Pseudo-randomly shift
    else if ( gameID % 3 == 0)
        retval = previous;
    else if ( gameID % 3 == 1)
        retval = previous + 1:i8;
    else if ( gameID % 3 == 2)
        retval = previous - 1:i8;
    retval % 3:i8
}

def i8 playerAction(bool recursed) {
    putchard(67:i8); #C
    putchard(104:i8); #h
    putchard(111:i8); #o
    putchard(105:i8); #i
    putchard(99:i8); #c
    putchard(101:i8); #e
    putchard(41:i8); #)
    putchard(32:i8); # <Space>

    i8 choicechar = input();
    if (choicechar == 114:i8 || choicechar == 82:i8) # choose r
        flee 0:i8;
    else if (choicechar == 112:i8 || choicechar == 80:i8) # choose p
        flee 1:i8;
    else if (choicechar == 115:i8 || choicechar == 83:i8) # choose s
        flee 2:i8;

    putchard(66:i8); #B
    putchard(97:i8); #a
    putchard(100:i8); #d
    putchard(32:i8); # <Space>
    putchard(105:i8); #i
    putchard(110:i8); #n
    putchard(112:i8); #p
    putchard(117:i8); #u
    putchard(116:i8); #t
    putchard(33:i8); #!
    putchard(10:i8); # \n
    if (!recursed) {
        help();
        putchard(10:i8); # \n
    };
    playerAction(true)
}

def void main() {
    welcome();
    help();
    bool continue = true; 
    i8 AI_decision = 0:i8;
    i32 gameID = 1;
    i32 score = 0;
    while (continue) {
        showGame(gameID, score);
        i8 player_decision = playerAction(false);
        score = score + showResults(AI_decision, player_decision);
        gameID = gameID + 1;
        AI_decision = AIChoice(AI_decision, player_decision, gameID)
    };

};
